AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SageMakerStudioDomainName:
    Description: "Domain name for Sagemaker Studio Domain"
    Type: String

Resources:
  #########################
  #
  # VPC
  #
  #########################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  #########################
  #
  # Sagemaker
  #
  #########################
  SageMakerStudioExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - codebuild.amazonaws.com
              - sagemaker.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess # this is the same behaviour as the default execution role created by sagemaker
      Policies:
        - PolicyName: sagemakerstudio-demo-policy
          PolicyDocument: |
            {
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "codebuild:DeleteProject",
                          "codebuild:CreateProject",
                          "codebuild:BatchGetBuilds",
                          "codebuild:StartBuild"
                      ],
                      "Resource": "arn:aws:codebuild:*:*:project/sagemaker-studio*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": "logs:CreateLogStream",
                      "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/sagemaker-studio*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "logs:GetLogEvents",
                          "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/sagemaker-studio*:log-stream:*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": "logs:CreateLogGroup",
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ecr:CreateRepository",
                          "ecr:BatchGetImage",
                          "ecr:CompleteLayerUpload",
                          "ecr:DescribeImages",
                          "ecr:DescribeRepositories",
                          "ecr:UploadLayerPart",
                          "ecr:ListImages",
                          "ecr:InitiateLayerUpload",
                          "ecr:BatchCheckLayerAvailability",
                          "ecr:PutImage"
                      ],
                      "Resource": "arn:aws:ecr:*:*:repository/sagemaker-studio*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": "ecr:GetAuthorizationToken",
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:DeleteObject",
                        "s3:PutObject"
                        ],
                      "Resource": "arn:aws:s3:::sagemaker-*/*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "s3:CreateBucket"
                      ],
                      "Resource": "arn:aws:s3:::sagemaker*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "iam:GetRole",
                          "iam:ListRoles"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": "iam:PassRole",
                      "Resource": "arn:aws:iam::*:role/*",
                      "Condition": {
                          "StringLikeIfExists": {
                              "iam:PassedToService": "codebuild.amazonaws.com"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "sagemaker:CreateApp",
                          "sagemaker:CreateAppImageConfig",
                          "sagemaker:CreateDomain",
                          "sagemaker:CreateImage",
                          "sagemaker:CreateImageVersion",
                          "sagemaker:UpdateDomain"
                      ],
                      "Resource": "*"
                  }
              ]
            }

  SageMakerStudioDomain:
    Type: AWS::SageMaker::Domain
    Properties:
      AppNetworkAccessType: PublicInternetOnly # For demo purpose only (Non-EFS traffic is through a VPC managed by Amazon SageMaker, which allows direct internet access)
      AuthMode: IAM
      DefaultUserSettings:
        ExecutionRole: !GetAtt SageMakerStudioExecutionRole.Arn
      DomainName: !Ref SageMakerStudioDomainName
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      VpcId: !Ref VPC

  SageMakerUser:
    Type: AWS::SageMaker::UserProfile
    Properties:
      DomainId: !GetAtt SageMakerStudioDomain.DomainId
      UserProfileName: !Sub ${SageMakerStudioDomain}-default-user

  # SageMakerAppJupyterServer:
  #   DependsOn: SageMakerUser
  #   Type: AWS::SageMaker::App
  #   Properties:
  #     AppName: default
  #     AppType: JupyterServer
  #     DomainId: !GetAtt SageMakerStudioDomain.DomainId
  #     UserProfileName: !Sub ${SageMakerStudioDomain}-default-user # no way of referencing the user profile name only from AWS::SageMaker::UserProfile

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  SageMakerStudioDomain:
    Description: SageMaker Studio Domain
    Value: !Ref SageMakerStudioDomain
